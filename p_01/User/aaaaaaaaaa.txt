
from django.contrib.auth.models import AbstractUser
from django.db import models

gen=(('M','male'),('f','female'))
class CustomUser(AbstractUser):
   USER_TYPE_CHOICES = (
        ('user', 'user'),
        ('employee', 'employee'),
        ('admin', 'admin'),

        ('volunteer', 'volunteer'),)
   username=models.CharField(max_length=50)
   name=models.CharField(max_length=50)
   phone=models.CharField(max_length=12)
   email=models.EmailField(max_length=50)
   place=models.CharField(max_length=100)
   pin=models.IntegerField(null=True)
   age=models.IntegerField(null=True)
   gender=models.CharField(choices=gen,max_length=10)
   user_type = models.CharField(max_length=20, choices=USER_TYPE_CHOICES, default='user')
   password=models.CharField(max_length=50)
   def is_user(self):
        return self.user_type == 'user'

   def is_employee(self):
        return self.user_type == 'employee'

   def is_volunteer(self):
        return self.user_type == 'volunteer'
   def is_admin(self):
        return self.user_type=='admin'
   class Meta:
    #    pass
        abstract = True
class Users(CustomUser):
    user_img=models.ImageField(upload_to='user_img', null = True)
    user_type = models.CharField(max_length=20, choices=CustomUser.USER_TYPE_CHOICES, default='user')
    groups = models.ManyToManyField('auth.Group', related_name='user_groups')
    user_permissions = models.ManyToManyField('auth.Permission', related_name='user_user_permissions')
    class Meta:
        verbose_name_plural = "Users"
    def __str__(self):
        return self.username